{"version":3,"sources":["components/CurrentUSData.js","components/BarGraph.js","components/LineGraph.js","components/StateGraph.js","components/USAmap.js","App.js","serviceWorker.js","index.js","assets/data/statelatlong.csv"],"names":["CurrentUSData","props","data","currentUSData","positiveTests","positive","toLocaleString","negativeTests","negative","hospitalizedTests","hospitalized","deaths","death","totalCases","total","Row","Col","Card","className","CardBody","BarGraph","statesCurrentData","statesCoords","labels","nameArr","slice","sort","map","statename","i","push","Name","getStateName","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","posArr","stateName","stateInfo","find","state","State","statenum","getPosResults","width","height","options","plugins","clamp","datalabels","align","anchor","rotation","formatter","value","context","borderRadius","color","font","weight","maintainAspectRatio","autoSkip","callback","index","values","LineGraph","StateGraph","stateClicked","statesDailyData","useState","confirmedCases","caseArr","dateArr","reverse","daily","year","date","toString","month","day","dateString","randomColorGenerator","Math","random","fill","USAMap","today","moment","format","geography","setGeography","mapType","setStatesDailyData","setStatesCurrentData","setCurrentUSData","setStatesCoords","setStateClicked","stateListAbbr","setStateListAbbr","graphType","setGraphType","projection","geoAlbersUsa","scale","translate","useEffect","fetch","then","response","status","json","us","console","log","feature","objects","states","features","d3","statesCoordsCSV","s","catch","err","normlaizeLog","log2","getLongLat","Longitude","Latitude","Container","sm","viewBox","d","key","n","geoPath","length","stroke","strokeWidth","onClick","countryIndex","properties","name","stateAbbr","handleClick","cx","cy","r","handleMarkerClick","fontSize","x","y","Input","type","onChange","e","target","option","ButtonGroup","UncontrolledTooltip","placement","Button","id","outline","style","border","App","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.2a48f02b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col, Row, Card, CardBody } from 'reactstrap';\r\n\r\nconst CurrentUSData = (props) => {\r\n    const data = props.currentUSData;\r\n    const positiveTests = data.positive ? data.positive.toLocaleString() : 0;\r\n    const negativeTests = data.negative ? data.negative.toLocaleString() : 0;\r\n    const hospitalizedTests = data.hospitalized ? data.hospitalized.toLocaleString() : 0;\r\n    const deaths = data.death ? data.death.toLocaleString() : 0;\r\n    const totalCases = data.total ? data.total.toLocaleString() : 0;\r\n\r\n    return (\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"bg-success\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-success\">\r\n                    <i className=\"fas fa-plus-square\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{positiveTests}</h4>\r\n                    <h6 className=\"text-white op-5\">Positive</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-danger\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-warning\">\r\n                    <i className=\"fas fa-minus-circle\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{negativeTests}</h4>\r\n                    <h6 className=\"text-white op-5\">Negative</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-warning\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-info\">\r\n                    <i className=\"fas fa-hospital-symbol\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h3 className=\"mb-0 text-white\">{hospitalizedTests}</h3>\r\n                    <h6 className=\"text-white op-5\">Hospitialized</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-dark\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-danger\">\r\n                    <i className=\"fas fa-heartbeat\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{deaths}</h4>\r\n                    <h6 className=\"text-white op-5\">Deaths</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card className=\"bg-primary\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-warning\">\r\n                    <i className=\"fas fa-square-full\"/>\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{totalCases}</h4>\r\n                    <h6 className=\"text-white op-5\">TOTAL</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      );\r\n}\r\n\r\nexport default CurrentUSData;","import React, {useState} from 'react';\r\nimport {Card, CardBody, Col, Button, ButtonGroup, UncontrolledTooltip} from 'reactstrap';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst BarGraph = (props) => {\r\n  const {statesCurrentData, statesCoords} = props\r\n  \r\n  const getStateName = () => {\r\n    const nameArr=[]\r\n    statesCoords.slice().sort().map((statename, i) => {nameArr.push(statename.Name)});\r\n    return nameArr;\r\n  }\r\n  \r\n  const getPosResults = () => {\r\n    const posArr = []\r\n    statesCoords.map((stateName, i) => {\r\n      const stateInfo = statesCurrentData.find(({state}) => state === stateName.State);\r\n      stateInfo && posArr.push(stateInfo.positive);\r\n      \r\n    })\r\n    \r\n    statesCurrentData.slice().sort().map((statenum, i) => {posArr.push(statenum.positive)});\r\n    return posArr;\r\n  }\r\n  \r\n    const randomColorGenerator = function () { \r\n      return '#' + (Math.random().toString(16) + '0000000').slice(2, 8); \r\n    };\r\n\r\n    const data = {\r\n        labels: getStateName(),\r\n        datasets: [\r\n            {\r\n              label: 'Current Cases',\r\n              backgroundColor: 'rgba(26, 94, 255, 1)',\r\n              borderColor: 'rgba(26, 94, 255, 1)',\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: 'rgba(26, 94, 255, 1)',\r\n              hoverBorderColor: 'rgba(26, 94, 255, 1)',\r\n              data: getPosResults()\r\n            }\r\n        ]\r\n      };\r\n\r\n\r\n    return <Col>\r\n      <Card>\r\n        <CardBody>\r\n        <h2>Comparison By State</h2>\r\n        <Bar\r\n            data={data}\r\n            width={1200}\r\n            height={500}\r\n            options={{\r\n                plugins: {\r\n                  labels: false,\r\n                  clamp: true,\r\n                  datalabels: {\r\n                    align: 'end',\r\n                    anchor: 'end',\r\n                    rotation: 270,\r\n                    formatter: function(value, context) {\r\n                            return (value.toLocaleString());\r\n                    },\r\n                    },\r\n                    borderRadius: 4,\r\n                    color: 'white',\r\n                    font: {\r\n                        weight: 'bold'\r\n                    },\r\n                },\r\n                maintainAspectRatio: true,\r\n                'scales': {\r\n                  'xAxes': [\r\n                      {\r\n                          'gridLines': { 'display': false },\r\n                          'ticks': { 'fontFamily': 'Poppins', autoSkip: false },\r\n                \r\n                      }\r\n                  ],\r\n                  'yAxes': [\r\n                      {\r\n                          'gridLines': { 'display': true },\r\n                          'ticks': { \r\n                                'fontFamily': 'Poppins',\r\n                                callback: function(value, index, values) {\r\n                                  return (value.toLocaleString());\r\n                                }\r\n                            }\r\n                      }\r\n                  ]\r\n              },\r\n    \r\n            }}\r\n        />\r\n        </CardBody>\r\n      </Card>\r\n      </Col>\r\n  };\r\n\r\nexport default BarGraph;","import React, {useState} from 'react';\r\nimport {Card, CardBody, Col, Button, ButtonGroup, UncontrolledTooltip} from 'reactstrap';\r\nimport {Line} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst LineGraph = (props) => {\r\n  const {statesCurrentData, statesCoords} = props\r\n  \r\n  const getStateName = () => {\r\n    const nameArr=[]\r\n    statesCoords.slice().sort().map((statename, i) => {nameArr.push(statename.Name)});\r\n    return nameArr;\r\n  }\r\n  \r\n  const getPosResults = () => {\r\n    const posArr = []\r\n    statesCoords.map((stateName, i) => {\r\n      const stateInfo = statesCurrentData.find(({state}) => state === stateName.State);\r\n      stateInfo && posArr.push(stateInfo.positive);\r\n      \r\n    })\r\n    \r\n    statesCurrentData.slice().sort().map((statenum, i) => {posArr.push(statenum.positive)});\r\n    return posArr;\r\n  }\r\n  \r\n    const randomColorGenerator = function () { \r\n      return '#' + (Math.random().toString(16) + '0000000').slice(2, 8); \r\n    };\r\n\r\n    const data = {\r\n        labels: getStateName(),\r\n        datasets: [\r\n            {\r\n              label: 'Current Cases',\r\n              backgroundColor: 'rgba(26, 94, 255, 1)',\r\n              borderColor: 'rgba(26, 94, 255, 1)',\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: 'rgba(26, 94, 255, 1)',\r\n              hoverBorderColor: 'rgba(26, 94, 255, 1)',\r\n              data: getPosResults()\r\n            }\r\n        ]\r\n      };\r\n\r\n\r\n    return <Col>\r\n      <Card>\r\n        <CardBody>\r\n        <h2>Comparison By State</h2>\r\n        <Line\r\n            data={data}\r\n            width={1200}\r\n            height={500}\r\n            options={{\r\n                plugins: {\r\n                  labels: false,\r\n                  clamp: true,\r\n                  datalabels: {\r\n                    align: 'end',\r\n                    anchor: 'end',\r\n                    rotation: 270,\r\n                    formatter: function(value, context) {\r\n                            return (value.toLocaleString());\r\n                    },\r\n                    },\r\n                    borderRadius: 4,\r\n                    color: 'white',\r\n                    font: {\r\n                        weight: 'bold'\r\n                    },\r\n                },\r\n                maintainAspectRatio: true,\r\n                'scales': {\r\n                  'xAxes': [\r\n                      {\r\n                          'gridLines': { 'display': false },\r\n                          'ticks': { 'fontFamily': 'Poppins', autoSkip: false },\r\n                \r\n                      }\r\n                  ],\r\n                  'yAxes': [\r\n                      {\r\n                          'gridLines': { 'display': true },\r\n                          'ticks': { \r\n                                'fontFamily': 'Poppins',\r\n                                callback: function(value, index, values) {\r\n                                  return (value.toLocaleString());\r\n                                }\r\n                            }\r\n                      }\r\n                  ]\r\n              },\r\n    \r\n            }}\r\n        />\r\n        </CardBody>\r\n      </Card>\r\n      </Col>\r\n  };\r\n\r\nexport default LineGraph;","import React, {useState} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { CardTitle, Card, CardBody, Col} from 'reactstrap';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst StateGraph = (props) => {\r\n    const {stateClicked, statesDailyData} = props;\r\n    const [numDays, setNumDays] = useState();\r\n\r\n    const confirmedCases = () => {\r\n        const caseArr = []\r\n        const dateArr = []\r\n        statesDailyData.slice(0).reverse().map((daily, i) => {\r\n            if (stateClicked === daily.state) {\r\n                caseArr.push(daily.positive);\r\n                const year = daily.date.toString().slice(0,4);\r\n                const month = daily.date.toString().slice(4,6);\r\n                const day = daily.date.toString().slice(6,8);\r\n                const dateString = `${month}-${day}-${year}`\r\n                dateArr.push(dateString)\r\n            }\r\n        })\r\n        return [caseArr, dateArr];\r\n    }\r\n\r\n    const randomColorGenerator = function () { \r\n        return '#' + (Math.random().toString(16) + '0000000').slice(2, 8); \r\n    };\r\n\r\n    const data = {\r\n        labels: confirmedCases()[1],\r\n        backgroundColor: randomColorGenerator(),\r\n        datasets: [\r\n        {\r\n            label: '# of confirmed cases',\r\n            data: confirmedCases()[0],\r\n            fill: true,          // Fill area under the line?\r\n            borderColor: randomColorGenerator()  // Line color\r\n        }\r\n        ]\r\n    }\r\n\r\n    const options = {\r\n        maintainAspectRatio: true\t// Don't maintain w/h ratio\r\n    }\r\n    \r\n    return <Col>\r\n        <Card>\r\n            <CardBody>\r\n                    <h3>{stateClicked}: Growth over past 3 weeks</h3>\r\n                    <Line data={data}\r\n                    options={{\r\n                        plugins: {\r\n                          labels: false,\r\n                          clamp: true,\r\n                          datalabels: {\r\n                            align: 'end',\r\n                            anchor: 'end',\r\n                            rotation: 270,\r\n                            formatter: function(value, context) {\r\n                                    return (value.toLocaleString());\r\n                            },\r\n                            },\r\n                            borderRadius: 4,\r\n                            color: 'white',\r\n                            font: {\r\n                                weight: 'bold'\r\n                            },\r\n                        },\r\n                        maintainAspectRatio: true,\r\n                        'scales': {\r\n                          'xAxes': [\r\n                              {\r\n                                  'gridLines': { 'display': false },\r\n                                  'ticks': { 'fontFamily': 'Poppins', autoSkip: false },\r\n                        \r\n                              }\r\n                          ],\r\n                          'yAxes': [\r\n                              {\r\n                                  'gridLines': { 'display': true },\r\n                                  'ticks': { \r\n                                        'fontFamily': 'Poppins',\r\n                                        callback: function(value, index, values) {\r\n                                          return (value.toLocaleString());\r\n                                        }\r\n                                    }\r\n                              }\r\n                          ]\r\n                      },\r\n                    }}\r\n                    />\r\n            </CardBody>\r\n        </Card>\r\n        </Col>\r\n}\r\n\r\nexport default StateGraph;","import React, {useState, useEffect} from 'react';\r\nimport * as d3 from 'd3';\r\nimport { geoAlbersUsa, geoPath } from 'd3-geo';\r\nimport { feature } from 'topojson-client';\r\nimport moment from 'moment';\r\nimport {Card, CardBody, Container, Input, Row, Col, Button, ButtonGroup, UncontrolledTooltip} from 'reactstrap';\r\n\r\nimport statesCoordsCSV from '../assets/data/statelatlong.csv';\r\nimport CurrentUSData from '../components/CurrentUSData';\r\nimport BarGraph from '../components/BarGraph';\r\nimport LineGraph from '../components/LineGraph';\r\nimport StateGraph from '../components/StateGraph';\r\n\r\nconst USAMap = () => {\r\n    const today = moment().format(\"MMM  DD, YYYY\");\r\n    const width = 975;\r\n    const height = 610;\r\n    const [geography, setGeography] = useState([]);\r\n    const [mapType, setType] = useState(\"states\");\r\n    const [statesDailyData, setStatesDailyData] = useState([]);\r\n    const [statesCurrentData, setStatesCurrentData] = useState([]);\r\n    const [currentUSData, setCurrentUSData] = useState({});\r\n    const [statesCoords, setStatesCoords] = useState([]);\r\n    const [stateClicked, setStateClicked] = useState(\"WA\");\r\n    const [stateListAbbr, setStateListAbbr] = useState([]);\r\n    const [graphType, setGraphType] = useState(\"bar\");\r\n    \r\n    const randomColorGenerator = () => { \r\n        return '#' + (Math.random().toString(16) + '0000000').slice(4, 8); \r\n    };\r\n\r\n    const projection = geoAlbersUsa()\r\n        .scale(1300)\r\n        .translate([ width/2, height/2])\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\")\r\n            .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(us => {\r\n                    console.log(\"response data = \", us)\r\n                    setGeography(feature(us, us.objects.states).features);\r\n                    \r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/states\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"states current data = \", data)\r\n                    setStatesCurrentData(data);\r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/states/daily\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"states daily data = \", data)\r\n                    setStatesDailyData(data);\r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/us\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"current US data = \", data)\r\n                    setCurrentUSData(data[0]);\r\n                })\r\n            })\r\n\r\n\r\n            d3.csv(statesCoordsCSV)\r\n            .then((data) => {\r\n                setStatesCoords(data);\r\n                data.map(s => {\r\n                    stateListAbbr.push(s.State);\r\n                    setStateListAbbr(stateListAbbr);\r\n                })\r\n                console.log(\"stateListAbbr: \", stateListAbbr)\r\n            })\r\n            .catch((err) => {\r\n                throw err;\r\n            })\r\n    }, [])\r\n\r\n    const normalize = (min, max, value) => {\r\n        // console.log(\"normalize: min, max, value = \", min, max, value)\r\n        const result = ((value - min) / (max - min));\r\n        // console.log(\"normalize result = \", result)\r\n        return result;\r\n    }\r\n\r\n    const normlaizeLog = (state, value) => {\r\n        if (Math.log2(value) == \"-Infinity\") {\r\n            // console.log(\"normlaizeLog: -Infinity found for state \", state)\r\n        } else {\r\n            return Math.log2(value);\r\n        }\r\n    }\r\n\r\n    const validateState = (state) => {\r\n        const stateInfo = statesCoords.find(({State}) => State === state)\r\n        if (!stateInfo) {\r\n            // console.log(`validateState: long lat not found for ${state}. Returning null`)\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const getLongLat = (state) => {\r\n        const stateInfo = statesCoords.find(({State}) => State === state);\r\n        if (!stateInfo) {\r\n            return null;\r\n        }\r\n        return [stateInfo.Longitude, stateInfo.Latitude];\r\n    }\r\n    \r\n    const handleClick = countryIndex => {\r\n        const stateName = (geography[countryIndex].properties.name);\r\n        const stateAbbr = statesCoords.find(({Name}) => Name === stateName)\r\n        setStateClicked(stateAbbr.State);\r\n    }\r\n\r\n    const handleMarkerClick = countryIndex => {\r\n        const stateName = (geography[countryIndex].properties.name);\r\n        const stateAbbr = statesCoords.find(({Name}) => Name === stateName)\r\n        setStateClicked(stateAbbr.State);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setStateClicked(e.target.value)\r\n    } \r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <h3 className=\"text-dark  p-3\">\r\n                                        COVID-19 Tests and Results as of {today}\r\n                                    </h3>\r\n                                    <CurrentUSData currentUSData={currentUSData}/>\r\n                                </Row>\r\n                        </CardBody>\r\n                    </Card>                 \r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                            <Col sm={10}>\r\n                            <svg width={ width } height={ height } viewBox=\"0 0 975 610\">\r\n                                <g className=\"state-boundary\">\r\n                                {\r\n                                    geography.map((d,i) => (\r\n                                    <path\r\n                                        key={ `path-${ i }` }n\r\n                                        d={ geoPath().projection(projection)(d) }\r\n                                        className={mapType}\r\n                                        fill={ `rgba(100,120,180,${ 1 / geography.length * i})` }\r\n                                        stroke=\"#FFFFFF\"\r\n                                        strokeWidth={ 0.5 }\r\n                                        onClick={ () => handleClick(i) }\r\n                                    />\r\n                                    ))\r\n                                }\r\n                                </g>\r\n                    \r\n                                <g className=\"markers\">\r\n                                {\r\n                                    statesCoords.length > 0 && statesCurrentData.map((s, i) => (\r\n                                        validateState(s.state) && <circle\r\n                                            key={ `marker-${i}` }\r\n                                            cx={  projection(getLongLat(s.state))[0] }\r\n                                            cy={ projection(getLongLat(s.state))[1] }\r\n                                            r={ normlaizeLog(s.state, s.positive) }\r\n                                            fill=\"#E91E63\"\r\n                                            stroke=\"#FFFFFF\"\r\n                                            onClick={ () => handleMarkerClick(i) }\r\n                                        />\r\n                                        ))\r\n                                }\r\n                                </g>\r\n                                <g className=\"markers\">\r\n                                {\r\n                                    statesCoords.length > 0 && statesCurrentData.map((s, i) => (\r\n                                        <text key={i}\r\n                                            fontSize=\"smaller\"\r\n                                            x={ getLongLat(s.state) && projection(getLongLat(s.state))[0] }\r\n                                            y={ getLongLat(s.state) && projection(getLongLat(s.state))[1] }\r\n                                        >\r\n                                            <tspan>{s.state}-</tspan><tspan>{s.positive}</tspan>\r\n                                        </text>\r\n                                    ))\r\n                                }\r\n                                </g>\r\n                            </svg> \r\n                            </Col>  \r\n                            <Col sm={2}>\r\n                                <Input type=\"select\" name=\"stateClicked\" onChange={handleChange}>\r\n                                <option value=\"\">Select State</option>\r\n                                    {stateListAbbr.map(option => <option key={option} value={option}>{option}</option>)}\r\n                                </Input>\r\n                            </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>                 \r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <StateGraph stateClicked={stateClicked} statesDailyData={statesDailyData}/>\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n               <ButtonGroup className=\"pull-right\" >\r\n                    <UncontrolledTooltip placement=\"top\" target=\"showBarGraph\">\r\n                        One State\r\n                    </UncontrolledTooltip>\r\n                    <UncontrolledTooltip placement=\"top\" target=\"showLineGraph\">\r\n                    All States\r\n                    </UncontrolledTooltip>\r\n\r\n                    <Button id=\"showBarGraph\" className=\"bg-primary text-white\" outline style={{border:1}} onClick={()=> setGraphType(\"bar\")}>Bar Graph</Button>\r\n                    <Button id=\"showLineGraph\"  className=\"bg-success text-white\" outline style={{border:1}} onClick={()=>setGraphType(\"line\")}>Line Graph</Button>\r\n                </ButtonGroup>\r\n            </Row>\r\n            <Row>\r\n                {\r\n                    graphType == \"bar\" && <BarGraph statesCurrentData={statesCurrentData} statesCoords={statesCoords}/>\r\n                }\r\n                {\r\n                    graphType == \"line\" && <LineGraph statesCurrentData={statesCurrentData} statesCoords={statesCoords}/>\r\n                }\r\n                \r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default USAMap;","import React from 'react';\nimport USAMap from './components/USAmap';\nimport { Container } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container fluid className=\"bg-dark text-dark\">\n      <USAMap/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/scss/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/statelatlong.88d2484f.csv\";"],"sourceRoot":""}