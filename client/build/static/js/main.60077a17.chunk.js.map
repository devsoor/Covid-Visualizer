{"version":3,"sources":["assets/data/statelatlong.csv","components/CurrentUSData.js","components/USAmap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CurrentUSData","props","data","currentUSData","positiveTests","positive","toLocaleString","negativeTests","negative","hospitalizedTests","hospitalized","deaths","death","totalCases","total","Row","Col","Card","className","CardBody","USAMap","today","moment","format","useState","geography","setGeography","mapType","setStatesDailyData","statesCurrentData","setStatesCurrentData","setCurrentUSData","statesCoords","setStatesCoords","projection","geoAlbersUsa","scale","translate","width","height","d3","useEffect","fetch","then","response","status","json","us","console","log","feature","objects","states","features","statesCoordsCSV","catch","err","normlaizeLog","state","value","Math","log2","getLongLat","stateInfo","find","State","Longitude","Latitude","Container","CardTitle","viewBox","map","d","i","key","geoPath","fill","length","stroke","strokeWidth","onClick","countryIndex","properties","name","s","cx","cy","r","handleMarkerClick","fontSize","x","y","App","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.60077a17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/statelatlong.88d2484f.csv\";","import React from 'react';\r\nimport { Col, Row, Card, CardBody } from 'reactstrap';\r\n\r\nconst CurrentUSData = (props) => {\r\n    const data = props.currentUSData;\r\n    const positiveTests = data.positive ? data.positive.toLocaleString() : 0;\r\n    const negativeTests = data.negative ? data.negative.toLocaleString() : 0;\r\n    const hospitalizedTests = data.hospitalized ? data.hospitalized.toLocaleString() : 0;\r\n    const deaths = data.death ? data.death.toLocaleString() : 0;\r\n    const totalCases = data.total ? data.total.toLocaleString() : 0;\r\n\r\n    return (\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"bg-success\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-success\">\r\n                    <i className=\"fas fa-plus-square\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{positiveTests}</h4>\r\n                    <h6 className=\"text-white op-5\">Positive</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-danger\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-warning\">\r\n                    <i className=\"fas fa-minus-circle\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{negativeTests}</h4>\r\n                    <h6 className=\"text-white op-5\">Negative</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-warning\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-info\">\r\n                    <i className=\"fas fa-hospital-symbol\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h3 className=\"mb-0 text-white\">{hospitalizedTests}</h3>\r\n                    <h6 className=\"text-white op-5\">Hospitialized</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n  \r\n          <Col>\r\n            <Card className=\"bg-dark\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-danger\">\r\n                    <i className=\"fas fa-heartbeat\" />\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{deaths}</h4>\r\n                    <h6 className=\"text-white op-5\">Deaths</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card className=\"bg-primary\">\r\n              <CardBody>\r\n                <div className=\"d-flex flex-row\">\r\n                  <div className=\"round align-self-center round-warning\">\r\n                    <i className=\"fas fa-square-full\"/>\r\n                  </div>\r\n                  <div className=\"ml-2 align-self-center\">\r\n                    <h4 className=\"mb-0 text-white\">{totalCases}</h4>\r\n                    <h6 className=\"text-white op-5\">TOTAL</h6>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      );\r\n}\r\n\r\nexport default CurrentUSData;","import React, {useState, useEffect} from 'react';\r\nimport * as d3 from 'd3';\r\nimport { geoAlbersUsa, geoPath } from 'd3-geo';\r\nimport { feature } from 'topojson-client';\r\nimport moment from 'moment';\r\nimport { Row, Col, Container, Card, CardBody, CardTitle} from 'reactstrap';\r\nimport statesCoordsCSV from '../assets/data/statelatlong.csv';\r\nimport CurrentUSData from '../components/CurrentUSData';\r\n\r\nconst USAMap = () => {\r\n    const today = moment().format(\"MMM  DD, YYYY\");\r\n    const width = 975;\r\n    const height = 610;\r\n    const [geography, setGeography] = useState([]);\r\n    const [mapType, setType] = useState(\"states\");\r\n    const [statesDailyData, setStatesDailyData] = useState([]);\r\n    const [statesCurrentData, setStatesCurrentData] = useState([]);\r\n    const [currentUSData, setCurrentUSData] = useState({});\r\n    const [statesCoords, setStatesCoords] = useState([]);\r\n    \r\n    const randomColorGenerator = () => { \r\n        return '#' + (Math.random().toString(16) + '0000000').slice(4, 8); \r\n    };\r\n\r\n    const projection = geoAlbersUsa()\r\n        .scale(1300)\r\n        .translate([ width/2, height/2])\r\n\r\n    const color = d3.scaleQuantize([1, 10], d3.schemeBlues[9])\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\")\r\n            .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(us => {\r\n                    console.log(\"response data = \", us)\r\n                    setGeography(feature(us, us.objects.states).features);\r\n                    \r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/states\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"states current data = \", data)\r\n                    setStatesCurrentData(data);\r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/states/daily\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"states daily data = \", data)\r\n                    setStatesDailyData(data);\r\n                })\r\n            })\r\n\r\n        fetch(\"https://covidtracking.com/api/us\")\r\n          .then(response => {\r\n                if (response.status !== 200) {\r\n                    console.log(\"Error: \", response.status)\r\n                    return;\r\n                }\r\n                response.json().then(data => {\r\n                    console.log(\"current US data = \", data)\r\n                    setCurrentUSData(data[0]);\r\n                })\r\n            })\r\n\r\n\r\n            d3.csv(statesCoordsCSV)\r\n            .then((data) => {\r\n                setStatesCoords(data);\r\n                // statesCoords.push(data);\r\n                console.log(\"d3.csv: statesCoords = \", statesCoords)\r\n            })\r\n            .catch((err) => {\r\n                throw err;\r\n            })\r\n    }, [])\r\n\r\n    const normalize = (min, max, value) => {\r\n        // console.log(\"normalize: min, max, value = \", min, max, value)\r\n        const result = ((value - min) / (max - min));\r\n        // console.log(\"normalize result = \", result)\r\n        return result;\r\n    }\r\n\r\n    const normlaizeLog = (state, value) => {\r\n        if (Math.log2(value) == \"-Infinity\") {\r\n            // console.log(\"normlaizeLog: -Infinity found for state \", state)\r\n        } else {\r\n            return Math.log2(value);\r\n        }\r\n    }\r\n\r\n    const validateState = (state) => {\r\n        const stateInfo = statesCoords.find(({State}) => State === state)\r\n        if (!stateInfo) {\r\n            // console.log(`validateState: long lat not found for ${state}. Returning null`)\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const getLongLat = (state) => {\r\n        const stateInfo = statesCoords.find(({State}) => State === state);\r\n        if (!stateInfo) {\r\n            // console.log(`getLongLat: long lat not found for ${state}. Returning null`)\r\n            return null;\r\n        }\r\n        return [stateInfo.Longitude, stateInfo.Latitude];\r\n    }\r\n    \r\n    const handleClick = countryIndex => {\r\n        console.log(\"geography = \", geography)\r\n        console.log(\"handleClick: statesCoords = \", statesCoords)\r\n        console.log(\"Clicked on state: \", geography[countryIndex].properties.name)\r\n        console.log(\"Clicked on state object: \", geography[countryIndex])\r\n    }\r\n\r\n    const handleMarkerClick = i => {\r\n        console.log(\"Marker: \", geography[i])\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n            <CardTitle className=\"bg-light mt-3 mb-3 text-grey\">\r\n                COVID-19 Tests and Results as of {today}\r\n            </CardTitle>\r\n                <CurrentUSData currentUSData={currentUSData}/>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <svg width={ width } height={ height } viewBox=\"0 0 975 610\">\r\n                        <g className=\"state-boundary\">\r\n                        {\r\n                            geography.map((d,i) => (\r\n                            <path\r\n                                key={ `path-${ i }` }\r\n                                d={ geoPath().projection(projection)(d) }\r\n                                className={mapType}\r\n                                fill={ `rgba(128,128,128,${ 1 / geography.length * i})` }\r\n                                stroke=\"#FFFFFF\"\r\n                                strokeWidth={ 0.5 }\r\n                                onClick={ () => handleClick(i) }\r\n                            />\r\n                            ))\r\n                        }\r\n                        </g>\r\n             \r\n                        <g className=\"markers\">\r\n                        {\r\n                            statesCoords.length > 0 && statesCurrentData.map((s, i) => (\r\n                                validateState(s.state) && <circle\r\n                                    key={ `marker-${i}` }\r\n                                    cx={  projection(getLongLat(s.state))[0] }\r\n                                    cy={ projection(getLongLat(s.state))[1] }\r\n                                    r={ normlaizeLog(s.state, s.positive) }\r\n                                    fill=\"#E91E63\"\r\n                                    stroke=\"#FFFFFF\"\r\n                                    onClick={ () => handleMarkerClick(i) }\r\n                                />\r\n                                ))\r\n                        }\r\n                        </g>\r\n                        <g className=\"markers\">\r\n                        {\r\n                            statesCoords.length > 0 && statesCurrentData.map((s, i) => (\r\n                                <text key={i}\r\n                                    fontSize=\"smaller\"\r\n                                    x={ getLongLat(s.state) && projection(getLongLat(s.state))[0] }\r\n                                    y={ getLongLat(s.state) && projection(getLongLat(s.state))[1] }\r\n                                >\r\n                                    {/* <tspan x={ getLongLat(s.state) && projection(getLongLat(s.state))[0] } dy=\"1.2em\">{s.state}</tspan>\r\n                                    <tspan x={ getLongLat(s.state) && projection(getLongLat(s.state))[0] } dy=\"1.2em\">{s.positive}</tspan> */}\r\n                                    <tspan>{s.state}-</tspan><tspan>{s.positive}</tspan>\r\n                                </text>\r\n                            ))\r\n                        }\r\n                        </g>\r\n                    </svg>                    \r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default USAMap;","import React from 'react';\nimport USAMap from './components/USAmap';\nimport { Container } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container fluid className=\"bg-light text-dark\">\n      <USAMap/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/scss/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}